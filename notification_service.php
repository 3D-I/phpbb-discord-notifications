<?php
/**
 *
 * Discord Notifications. An extension for the phpBB Forum Software package.
 *
 * @copyright (c) 2018, Tyler Olsen, https://github.com/rootslinux
 * @license GNU General Public License, version 2 (GPL-2.0)
 *
 */

namespace roots\discordnotifications;

/**
 * Contains the core logic for formatting and sending notification message to Discord.
 * This includes common utilities, such as verifying notification configuration settings
 */
class notification_service
{
	// Maximum number of characters allowed by Discord in a message description.
	// Reference: https://discordapp.com/developers/docs/resources/channel#embed-limits
	const MAX_MESSAGE_SIZE = 2048;

	// The notification color to use as a default if a missing or invalid color value is received.
	const DEFAULT_COLOR = 11777212; // A gray color

	/** @var \phpbb\config\config */
	protected $config;

	/**
	 * Constructor
	 *
	 * @param \phpbb\config\config $config
	 */
	public function __construct(\phpbb\config\config $config)
	{
		$this->config = $config;
	}

	/**
	 * Check whether notifications are enabled for a certain type
	 * @param $notification_type The name of the notification type to check
	 * @return False if the global notification setting is disabled or the notification type is disabled
	 */
	public function is_notification_type_enabled($notification_type)
	{
		// First check the global extension enabled setting. We don't generate any notifications if this is disabled
		if ($this->config['discord_notifications_enabled'] == 1 && $this->config[$notification_type] == 1)
		{
			return true;
		}

		return false;
	}

	/**
	 * Check whether notifications of a specific type should be sent that were generated by a forum
	 * @param $notification_type The name of the notification type to check
	 * @param $forum_id The ID of the forum to check
	 * @return False if the global notification setting is disabled, the notification type is disabled, or notifications are disabled for the forum
	 */
	public function is_notification_forum_enabled($forum_id)
	{
		// TODO: Check the forum table to see if discord notifications are enabled on it
		if ($this->config['discord_notifications_enabled'] == 1)
		{
			return true;
		}
	}

	/**
	 * Retrieve the value for the ACP settings configuration related to post preview length
	 * @return The number of characters to display in the post preview. A zero value indicates that no preview should be displayed
	 */
	public function get_post_preview_length()
	{
		return $this->config['discord_notifications_post_preview_length'];
	}

	/**
	 * Sends a notification message to Discord. This function checks the master switch configuration for the extension, but does
	 * no further checks. The caller is responsible for performing full validation of the notification prior to calling this function.
	 * @param message The message text to send. If empty, no message will be sent.
	 */
	public function send_discord_notification($message, $color)
	{
		if ($this->config['discord_notifications_enabled'] == 0 || $message == '')
		{
			return;
		}

		// Note that the value stored in the config table will always be a valid URL when discord_notifications_enabled is set
		$discord_webhook_url = $this->config['discord_notifications_webhook_url'];

		$this->send_message($discord_webhook_url, $message, $color);
	}

	/**
	 * Sends a notification message to Discord, disregarding any configurations that are currently set. This method is primarily for user testing
	 * purposes from the ACP
	 * @param message The message text to send. If empty, no message will be sent.
	 * @param discord_webhook_url The URL of the Discord webhook to transmit the message to. If this is an invalid URL, no message will be sent.
	 */
	public function force_send_discord_notification($message, $discord_webhook_url)
	{
		if (!filter_var($discord_webhook_url, FILTER_VALIDATE_URL) || $message == '')
		{
			return;
		}

		$this->send_message($discord_webhook_url, $message, NULL);
	}

	/**
	 * Helper function that performs the message transmission. Arguments are guaranteed to be valid strings.
	 * @param message The message text to send.
	 * @param discord_webhook_url The URL of the Discord webhook to transmit the message to.
	 * @return
	 */
	private function send_message($discord_webhook_url, $message, $color)
	{
		// Verify that we have a valid value for the color. Use the default color if this is not the case
		if (is_integer($color) == false || $color <= 0)
		{
			$color = self::DEFAULT_COLOR;
		}

		// First analyze the message and replace characters that would cause issues with the JSON formatting
		// Convert " to ' in the message to be sent as otherwise JSON formatting would break.
		$message = str_replace('"', "'", $message);

		// TODO: Verify that the message size is within the allowable limit and truncate if necessary

		// Place the message inside the JSON structure that Discord expects to receive. Uses embeds for embedded rich content
		// See: https://discordapp.com/developers/docs/resources/webhook#execute-webhook
		$post = sprintf('{"embeds": [{ "color" : "%d" ,"description" : "%s"}]}', $color, $message);

		// Use CURL to transmit the message via a POST operation to the webhook URL.
		$h = curl_init();
		curl_setopt($h, CURLOPT_URL, $discord_webhook_url);
		curl_setopt($h, CURLOPT_POST, 1);
		curl_setopt($h, CURLOPT_POSTFIELDS, $post);
		// This disables SSL. Its not ideal, but we don't expect to be transmitting sensitive data anyway.
		curl_setopt ($h, CURLOPT_SSL_VERIFYHOST, 0);
		curl_setopt ($h, CURLOPT_SSL_VERIFYPEER, 0);
		$response = curl_exec($h);
		curl_close($h);
	}
}
