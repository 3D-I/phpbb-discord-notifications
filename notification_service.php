<?php
/**
 *
 * Discord Notifications. An extension for the phpBB Forum Software package.
 *
 * @copyright (c) 2018, Tyler Olsen, https://github.com/rootslinux
 * @license GNU General Public License, version 2 (GPL-2.0)
 *
 */

namespace roots\discordnotifications;

/**
 * Contains the core logic for formatting and sending notification message to Discord.
 * This includes common utilities, such as verifying notification configuration settings
 */
class notification_service
{
	/** @var \phpbb\config\config */
	protected $config;

	/** @var \phpbb\config\db_text */
	protected $config_text;

	/** @var \phpbb\user */
	protected $user;

	/**
	 * Constructor
	 *
	 * @param \phpbb\config\config $config
	 */
	public function __construct(\phpbb\config\config $config, \phpbb\config\db_text $config_text, \phpbb\user $user)
	{
		$this->config = $config;
		$this->config_text = $config_text;
		$this->user = $user;
	}

	/**
	 * Check whether notifications are enabled for a certain type
	 * @param $notification_type The name of the notification type to check
	 * @return False if the global notification setting is disabled or the notification type is disabled
	 */
	public function is_notification_type_enabled($notification_type)
	{
		// First check the global extension enabled setting. We don't generate any notifications if this is disabled

		return true;
	}

	/**
	 * Check whether notifications of a specific type should be sent that were generated by a forum
	 * @param $notification_type The name of the notification type to check
	 * @param $forum_id The ID of the forum to check
	 * @return False if the global notification setting is disabled, the notification type is disabled, or notifications are disabled for the forum
	 */
	public function is_forum_notification_type_enabled($notification_type, $forum_id)
	{
		if ($this->is_notification_type_enabled($notification_type) == false)
		{
			return false;
		}

		// Check the forum table to see if discord notifications are enabled on it
		return true;
	}

	/**
	 * Given the ID of a valid user, returns text that contains the user name with a link to their user profile.
	 * @param $user_id The ID of the user
	 * @return Text formatted in the notation that Discord would interpret. If the user ID is invalid, an empty string is returned.
	 */
	public function generate_user_name_link($user_id)
	{
		return "";
	}

	/**
	 * Given the ID of a valid topic, returns text that contains the topic title with a link to the topic.
	 * @param $topic_id The ID of the topic
	 * @return Text formatted in the notation that Discord would interpret. If the topic ID is invalid, an empty string is returned.
	 */
	public function generate_topic_title_link($topic_id)
	{
		return "";
	}

	/**
	 * Given the ID of a valid post, returns text that contains the post title with a link to the post.
	 * @param $user_id The ID of the user
	 * @return Text formatted in the notation that Discord would interpret. If the post ID is invalid, an empty string is returned.
	 */
	public function generate_post_title_link($post_id)
	{
		return "";
	}

	/**
	 * Sends a notification message to Discord. This function checks the master switch configuration for the extension, but does
	 * no further checks. The caller is responsible for performing full validation of the notification prior to calling this function.
	 * @param message The message text to send. If empty, no message will be sent.
	 */
	public function send_discord_notification($message)
	{
		if ($message == '')
		{
			return;
		}
		if ($this->config['discord_notifications_enabled'] == 0)
		{
			return;
		}

		$discord_webhook_url = $this->config_text['discord_webhook_url'];

		$this->send_message($message, $discord_webhook_url);
	}

	/**
	 * Sends a notification message to Discord, disregarding any configurations that are currently set. This method is primarily for user testing
	 * purposes from the ACP
	 * @param message The message text to send. If empty, no message will be sent.
	 * @param discord_webhook_url The URL of the Discord webhook to transmit the message to. If empty, no message will be sent.
	 */
	public function force_send_discord_notification($message, $discord_webhook_url)
	{
		if ($message == '')
		{
			return;
		}
		if ($discord_webhook_url == '')
		{
			return;
		}

		$this->send_message($message, $discord_webhook_url);
	}

	/**
	 * Helper function that performs the message transmission. Arguments are guaranteed to be valid strings.
	 * @param message The message text to send.
	 * @param discord_webhook_url The URL of the Discord webhook to transmit the message to.
	 * @return
	 */
	private function send_message($message, $discord_webhook_url)
	{
		// First analyze the message and replace characters that would cause issues with the JSON formatting
		// Convert " to ' in the message to be sent as otherwise JSON formatting would break.
		$message = str_replace('"', "'", $message);

		// TEMP
		$color = 2993970;

		// Place the message inside the JSON structure that Discord expects to receive. Uses embeds for embedded rich content
		// See: https://discordapp.com/developers/docs/resources/webhook#execute-webhook
		$post = sprintf('{"embeds": [{ "color" : "%d" ,"description" : "%s"}]}', $color, $message);

		// Use CURL to transmit the message via a POST operation to the webhook URL.
		$h = curl_init();
		curl_setopt($h, CURLOPT_URL, $discord_webhook_url);
		curl_setopt($h, CURLOPT_POST, 1);
		curl_setopt($h, CURLOPT_POSTFIELDS, $post);
		// This shouldn't be done, but it wouldn't work otherwise because of SSL.
		curl_setopt ($h, CURLOPT_SSL_VERIFYHOST, 0);
		curl_setopt ($h, CURLOPT_SSL_VERIFYPEER, 0);
		curl_exec($h);
		curl_close($h);
	}

	/**
	 * The Discord webhook api does not accept urlencoded text. This function replaces problematic characters.
	 */
	private static function reformat_url($url)
	{
		$url = str_replace(" ", "%20", $url);
		$url = str_replace("(", "%28", $url);
		$url = str_replace(")", "%29", $url);
		return $url;
	}
}
